
beyaz_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027f4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080029b8  080029b8  000129b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029c8  080029c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080029c8  080029c8  000129c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029d0  080029d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029d0  080029d0  000129d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029d4  080029d4  000129d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080029d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  080029e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  080029e4  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c91  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000156a  00000000  00000000  00026ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005c8  00000000  00000000  00028238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000520  00000000  00000000  00028800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020238  00000000  00000000  00028d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006f2d  00000000  00000000  00048f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4332  00000000  00000000  0004fe85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001141b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001640  00000000  00000000  00114208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080029a0 	.word	0x080029a0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080029a0 	.word	0x080029a0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fa8e 	bl	8000a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f83a 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f8da 	bl	80006cc <MX_GPIO_Init>
  MX_CAN1_Init();
 8000518:	f000 f8a2 	bl	8000660 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  pHeader.DLC=1; //give message size of 1 byte
 800051c:	4b17      	ldr	r3, [pc, #92]	; (800057c <main+0x74>)
 800051e:	2201      	movs	r2, #1
 8000520:	611a      	str	r2, [r3, #16]
  	pHeader.IDE=CAN_ID_STD; //set identifier to standard
 8000522:	4b16      	ldr	r3, [pc, #88]	; (800057c <main+0x74>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  	pHeader.RTR=CAN_RTR_DATA; //set data type to remote transmission request?
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <main+0x74>)
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
  	pHeader.StdId=0x244; //define a standard identifier, used for message identification by filters (switch this for the other microcontroller)
 800052e:	4b13      	ldr	r3, [pc, #76]	; (800057c <main+0x74>)
 8000530:	f44f 7211 	mov.w	r2, #580	; 0x244
 8000534:	601a      	str	r2, [r3, #0]

  	//filter one (stack light blink)
  	sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0; //set fifo assignment
 8000536:	4b12      	ldr	r3, [pc, #72]	; (8000580 <main+0x78>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  	sFilterConfig.FilterIdHigh=0x245<<5; //the ID that the filter looks for (switch this for the other microcontroller)
 800053c:	4b10      	ldr	r3, [pc, #64]	; (8000580 <main+0x78>)
 800053e:	f644 02a0 	movw	r2, #18592	; 0x48a0
 8000542:	601a      	str	r2, [r3, #0]
  	sFilterConfig.FilterIdLow=0;
 8000544:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <main+0x78>)
 8000546:	2200      	movs	r2, #0
 8000548:	605a      	str	r2, [r3, #4]
  	sFilterConfig.FilterMaskIdHigh=0;
 800054a:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <main+0x78>)
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  	sFilterConfig.FilterMaskIdLow=0;
 8000550:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <main+0x78>)
 8000552:	2200      	movs	r2, #0
 8000554:	60da      	str	r2, [r3, #12]
  	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <main+0x78>)
 8000558:	2201      	movs	r2, #1
 800055a:	61da      	str	r2, [r3, #28]
  	sFilterConfig.FilterActivation=ENABLE;
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <main+0x78>)
 800055e:	2201      	movs	r2, #1
 8000560:	621a      	str	r2, [r3, #32]

  	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig); //configure CAN filter
 8000562:	4907      	ldr	r1, [pc, #28]	; (8000580 <main+0x78>)
 8000564:	4807      	ldr	r0, [pc, #28]	; (8000584 <main+0x7c>)
 8000566:	f000 fbcf 	bl	8000d08 <HAL_CAN_ConfigFilter>


  	HAL_CAN_Start(&hcan1); //start CAN
 800056a:	4806      	ldr	r0, [pc, #24]	; (8000584 <main+0x7c>)
 800056c:	f000 fcac 	bl	8000ec8 <HAL_CAN_Start>
  	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); //enable interrupts
 8000570:	2102      	movs	r1, #2
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <main+0x7c>)
 8000574:	f000 fed9 	bl	800132a <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	e7fe      	b.n	8000578 <main+0x70>
 800057a:	bf00      	nop
 800057c:	20000050 	.word	0x20000050
 8000580:	2000008c 	.word	0x2000008c
 8000584:	20000028 	.word	0x20000028

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 031c 	add.w	r3, r7, #28
 8000592:	2234      	movs	r2, #52	; 0x34
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f002 f9fa 	bl	8002990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 0308 	add.w	r3, r7, #8
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b29      	ldr	r3, [pc, #164]	; (8000658 <SystemClock_Config+0xd0>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a28      	ldr	r2, [pc, #160]	; (8000658 <SystemClock_Config+0xd0>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b26      	ldr	r3, [pc, #152]	; (8000658 <SystemClock_Config+0xd0>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c8:	2300      	movs	r3, #0
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	4b23      	ldr	r3, [pc, #140]	; (800065c <SystemClock_Config+0xd4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a22      	ldr	r2, [pc, #136]	; (800065c <SystemClock_Config+0xd4>)
 80005d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b20      	ldr	r3, [pc, #128]	; (800065c <SystemClock_Config+0xd4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e4:	2301      	movs	r3, #1
 80005e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f8:	2304      	movs	r3, #4
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005fc:	23a8      	movs	r3, #168	; 0xa8
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000600:	2302      	movs	r3, #2
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000604:	2302      	movs	r3, #2
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000608:	2302      	movs	r3, #2
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 031c 	add.w	r3, r7, #28
 8000610:	4618      	mov	r0, r3
 8000612:	f001 fefb 	bl	800240c <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800061c:	f000 f8c0 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	2302      	movs	r3, #2
 8000626:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800062c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000630:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000636:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	2105      	movs	r1, #5
 800063e:	4618      	mov	r0, r3
 8000640:	f001 fbce 	bl	8001de0 <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800064a:	f000 f8a9 	bl	80007a0 <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3750      	adds	r7, #80	; 0x50
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <MX_CAN1_Init+0x64>)
 8000666:	4a18      	ldr	r2, [pc, #96]	; (80006c8 <MX_CAN1_Init+0x68>)
 8000668:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <MX_CAN1_Init+0x64>)
 800066c:	2215      	movs	r2, #21
 800066e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000670:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_CAN1_Init+0x64>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <MX_CAN1_Init+0x64>)
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_CAN1_Init+0x64>)
 800067e:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000682:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_CAN1_Init+0x64>)
 8000686:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800068a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <MX_CAN1_Init+0x64>)
 800068e:	2200      	movs	r2, #0
 8000690:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_CAN1_Init+0x64>)
 8000694:	2200      	movs	r2, #0
 8000696:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <MX_CAN1_Init+0x64>)
 800069a:	2200      	movs	r2, #0
 800069c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_CAN1_Init+0x64>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <MX_CAN1_Init+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_CAN1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <MX_CAN1_Init+0x64>)
 80006b2:	f000 fa2d 	bl	8000b10 <HAL_CAN_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80006bc:	f000 f870 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000028 	.word	0x20000028
 80006c8:	40006400 	.word	0x40006400

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <MX_GPIO_Init+0xc8>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a2a      	ldr	r2, [pc, #168]	; (8000794 <MX_GPIO_Init+0xc8>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b28      	ldr	r3, [pc, #160]	; (8000794 <MX_GPIO_Init+0xc8>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b24      	ldr	r3, [pc, #144]	; (8000794 <MX_GPIO_Init+0xc8>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a23      	ldr	r2, [pc, #140]	; (8000794 <MX_GPIO_Init+0xc8>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_GPIO_Init+0xc8>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_GPIO_Init+0xc8>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <MX_GPIO_Init+0xc8>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_GPIO_Init+0xc8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800073c:	4816      	ldr	r0, [pc, #88]	; (8000798 <MX_GPIO_Init+0xcc>)
 800073e:	f001 fb11 	bl	8001d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000742:	2301      	movs	r3, #1
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000746:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800074a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800074c:	2302      	movs	r3, #2
 800074e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	4619      	mov	r1, r3
 8000756:	4811      	ldr	r0, [pc, #68]	; (800079c <MX_GPIO_Init+0xd0>)
 8000758:	f001 f958 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800075c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4619      	mov	r1, r3
 8000774:	4808      	ldr	r0, [pc, #32]	; (8000798 <MX_GPIO_Init+0xcc>)
 8000776:	f001 f949 	bl	8001a0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 1);
 800077a:	2201      	movs	r2, #1
 800077c:	2100      	movs	r1, #0
 800077e:	2006      	movs	r0, #6
 8000780:	f001 f90d 	bl	800199e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000784:	2006      	movs	r0, #6
 8000786:	f001 f926 	bl	80019d6 <HAL_NVIC_EnableIRQ>

}
 800078a:	bf00      	nop
 800078c:	3720      	adds	r7, #32
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40020400 	.word	0x40020400
 800079c:	40020000 	.word	0x40020000

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <Error_Handler+0x8>
	...

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <HAL_MspInit+0x4c>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ba:	4a0f      	ldr	r2, [pc, #60]	; (80007f8 <HAL_MspInit+0x4c>)
 80007bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c0:	6453      	str	r3, [r2, #68]	; 0x44
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <HAL_MspInit+0x4c>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <HAL_MspInit+0x4c>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <HAL_MspInit+0x4c>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007dc:	6413      	str	r3, [r2, #64]	; 0x40
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_MspInit+0x4c>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007ea:	2007      	movs	r0, #7
 80007ec:	f001 f8cc 	bl	8001988 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800

080007fc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	; 0x28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a1d      	ldr	r2, [pc, #116]	; (8000890 <HAL_CAN_MspInit+0x94>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d134      	bne.n	8000888 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <HAL_CAN_MspInit+0x98>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	4a1b      	ldr	r2, [pc, #108]	; (8000894 <HAL_CAN_MspInit+0x98>)
 8000828:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800082c:	6413      	str	r3, [r2, #64]	; 0x40
 800082e:	4b19      	ldr	r3, [pc, #100]	; (8000894 <HAL_CAN_MspInit+0x98>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <HAL_CAN_MspInit+0x98>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a14      	ldr	r2, [pc, #80]	; (8000894 <HAL_CAN_MspInit+0x98>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <HAL_CAN_MspInit+0x98>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000856:	f44f 7340 	mov.w	r3, #768	; 0x300
 800085a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000868:	2309      	movs	r3, #9
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	4809      	ldr	r0, [pc, #36]	; (8000898 <HAL_CAN_MspInit+0x9c>)
 8000874:	f001 f8ca 	bl	8001a0c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 2);
 8000878:	2202      	movs	r2, #2
 800087a:	2100      	movs	r1, #0
 800087c:	2014      	movs	r0, #20
 800087e:	f001 f88e 	bl	800199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000882:	2014      	movs	r0, #20
 8000884:	f001 f8a7 	bl	80019d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000888:	bf00      	nop
 800088a:	3728      	adds	r7, #40	; 0x28
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40006400 	.word	0x40006400
 8000894:	40023800 	.word	0x40023800
 8000898:	40020400 	.word	0x40020400

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <NMI_Handler+0x4>

080008a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <HardFault_Handler+0x4>

080008a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <MemManage_Handler+0x4>

080008ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <BusFault_Handler+0x4>

080008b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <UsageFault_Handler+0x4>

080008ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e8:	f000 f8f2 	bl	8000ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	for (int n=0;n<1000000;n++); //this loop is used to make a software delay, remove optimization for this to work
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	e002      	b.n	8000902 <EXTI0_IRQHandler+0x12>
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3301      	adds	r3, #1
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <EXTI0_IRQHandler+0x50>)
 8000906:	4293      	cmp	r3, r2
 8000908:	ddf8      	ble.n	80008fc <EXTI0_IRQHandler+0xc>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==1) //check to ensure pin is pressed
 800090a:	2101      	movs	r1, #1
 800090c:	480d      	ldr	r0, [pc, #52]	; (8000944 <EXTI0_IRQHandler+0x54>)
 800090e:	f001 fa11 	bl	8001d34 <HAL_GPIO_ReadPin>
 8000912:	4603      	mov	r3, r0
 8000914:	2b01      	cmp	r3, #1
 8000916:	d10b      	bne.n	8000930 <EXTI0_IRQHandler+0x40>
		{
			a++; //increment a
 8000918:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <EXTI0_IRQHandler+0x58>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	3301      	adds	r3, #1
 800091e:	b2da      	uxtb	r2, r3
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <EXTI0_IRQHandler+0x58>)
 8000922:	701a      	strb	r2, [r3, #0]
			HAL_CAN_AddTxMessage(&hcan1, &pHeader, &a, &TxMailbox);  //function to add message for transmition
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <EXTI0_IRQHandler+0x5c>)
 8000926:	4a08      	ldr	r2, [pc, #32]	; (8000948 <EXTI0_IRQHandler+0x58>)
 8000928:	4909      	ldr	r1, [pc, #36]	; (8000950 <EXTI0_IRQHandler+0x60>)
 800092a:	480a      	ldr	r0, [pc, #40]	; (8000954 <EXTI0_IRQHandler+0x64>)
 800092c:	f000 fb10 	bl	8000f50 <HAL_CAN_AddTxMessage>

		}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000930:	2001      	movs	r0, #1
 8000932:	f001 fa31 	bl	8001d98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	000f423f 	.word	0x000f423f
 8000944:	40020000 	.word	0x40020000
 8000948:	20000088 	.word	0x20000088
 800094c:	20000084 	.word	0x20000084
 8000950:	20000050 	.word	0x20000050
 8000954:	20000028 	.word	0x20000028

08000958 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800095c:	4811      	ldr	r0, [pc, #68]	; (80009a4 <CAN1_RX0_IRQHandler+0x4c>)
 800095e:	f000 fd0a 	bl	8001376 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, &r);
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <CAN1_RX0_IRQHandler+0x50>)
 8000964:	4a11      	ldr	r2, [pc, #68]	; (80009ac <CAN1_RX0_IRQHandler+0x54>)
 8000966:	2100      	movs	r1, #0
 8000968:	480e      	ldr	r0, [pc, #56]	; (80009a4 <CAN1_RX0_IRQHandler+0x4c>)
 800096a:	f000 fbcc 	bl	8001106 <HAL_CAN_GetRxMessage>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000974:	480e      	ldr	r0, [pc, #56]	; (80009b0 <CAN1_RX0_IRQHandler+0x58>)
 8000976:	f001 f9f5 	bl	8001d64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 800097a:	2201      	movs	r2, #1
 800097c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000980:	480b      	ldr	r0, [pc, #44]	; (80009b0 <CAN1_RX0_IRQHandler+0x58>)
 8000982:	f001 f9ef 	bl	8001d64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800098c:	4808      	ldr	r0, [pc, #32]	; (80009b0 <CAN1_RX0_IRQHandler+0x58>)
 800098e:	f001 f9e9 	bl	8001d64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000992:	2201      	movs	r2, #1
 8000994:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <CAN1_RX0_IRQHandler+0x58>)
 800099a:	f001 f9e3 	bl	8001d64 <HAL_GPIO_WritePin>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000028 	.word	0x20000028
 80009a8:	20000089 	.word	0x20000089
 80009ac:	20000068 	.word	0x20000068
 80009b0:	40020400 	.word	0x40020400

080009b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <SystemInit+0x20>)
 80009ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009be:	4a05      	ldr	r2, [pc, #20]	; (80009d4 <SystemInit+0x20>)
 80009c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009de:	490e      	ldr	r1, [pc, #56]	; (8000a18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009e0:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e4:	e002      	b.n	80009ec <LoopCopyDataInit>

080009e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ea:	3304      	adds	r3, #4

080009ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f0:	d3f9      	bcc.n	80009e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f2:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009f4:	4c0b      	ldr	r4, [pc, #44]	; (8000a24 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f8:	e001      	b.n	80009fe <LoopFillZerobss>

080009fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009fc:	3204      	adds	r2, #4

080009fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a00:	d3fb      	bcc.n	80009fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a02:	f7ff ffd7 	bl	80009b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a06:	f001 ff9f 	bl	8002948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a0a:	f7ff fd7d 	bl	8000508 <main>
  bx  lr    
 8000a0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a1c:	080029d8 	.word	0x080029d8
  ldr r2, =_sbss
 8000a20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a24:	200000b8 	.word	0x200000b8

08000a28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC_IRQHandler>
	...

08000a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a30:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0d      	ldr	r2, [pc, #52]	; (8000a6c <HAL_Init+0x40>)
 8000a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <HAL_Init+0x40>)
 8000a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <HAL_Init+0x40>)
 8000a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a54:	2003      	movs	r0, #3
 8000a56:	f000 ff97 	bl	8001988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f000 f808 	bl	8000a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a60:	f7ff fea4 	bl	80007ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023c00 	.word	0x40023c00

08000a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_InitTick+0x54>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_InitTick+0x58>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4619      	mov	r1, r3
 8000a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 ffaf 	bl	80019f2 <HAL_SYSTICK_Config>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00e      	b.n	8000abc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b0f      	cmp	r3, #15
 8000aa2:	d80a      	bhi.n	8000aba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	f000 ff77 	bl	800199e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab0:	4a06      	ldr	r2, [pc, #24]	; (8000acc <HAL_InitTick+0x5c>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e000      	b.n	8000abc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	20000004 	.word	0x20000004

08000ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_IncTick+0x20>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_IncTick+0x24>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_IncTick+0x24>)
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000008 	.word	0x20000008
 8000af4:	200000b4 	.word	0x200000b4

08000af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <HAL_GetTick+0x14>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	200000b4 	.word	0x200000b4

08000b10 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d101      	bne.n	8000b22 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e0ed      	b.n	8000cfe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d102      	bne.n	8000b34 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff fe64 	bl	80007fc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f042 0201 	orr.w	r2, r2, #1
 8000b42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b44:	f7ff ffd8 	bl	8000af8 <HAL_GetTick>
 8000b48:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b4a:	e012      	b.n	8000b72 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b4c:	f7ff ffd4 	bl	8000af8 <HAL_GetTick>
 8000b50:	4602      	mov	r2, r0
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	2b0a      	cmp	r3, #10
 8000b58:	d90b      	bls.n	8000b72 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2205      	movs	r2, #5
 8000b6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e0c5      	b.n	8000cfe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d0e5      	beq.n	8000b4c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f022 0202 	bic.w	r2, r2, #2
 8000b8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b90:	f7ff ffb2 	bl	8000af8 <HAL_GetTick>
 8000b94:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b96:	e012      	b.n	8000bbe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b98:	f7ff ffae 	bl	8000af8 <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	2b0a      	cmp	r3, #10
 8000ba4:	d90b      	bls.n	8000bbe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000baa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2205      	movs	r2, #5
 8000bb6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e09f      	b.n	8000cfe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d1e5      	bne.n	8000b98 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	7e1b      	ldrb	r3, [r3, #24]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d108      	bne.n	8000be6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	e007      	b.n	8000bf6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bf4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	7e5b      	ldrb	r3, [r3, #25]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d108      	bne.n	8000c10 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	e007      	b.n	8000c20 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	7e9b      	ldrb	r3, [r3, #26]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d108      	bne.n	8000c3a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f042 0220 	orr.w	r2, r2, #32
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	e007      	b.n	8000c4a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f022 0220 	bic.w	r2, r2, #32
 8000c48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	7edb      	ldrb	r3, [r3, #27]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d108      	bne.n	8000c64 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f022 0210 	bic.w	r2, r2, #16
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	e007      	b.n	8000c74 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f042 0210 	orr.w	r2, r2, #16
 8000c72:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	7f1b      	ldrb	r3, [r3, #28]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d108      	bne.n	8000c8e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f042 0208 	orr.w	r2, r2, #8
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	e007      	b.n	8000c9e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f022 0208 	bic.w	r2, r2, #8
 8000c9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	7f5b      	ldrb	r3, [r3, #29]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d108      	bne.n	8000cb8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f042 0204 	orr.w	r2, r2, #4
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	e007      	b.n	8000cc8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f022 0204 	bic.w	r2, r2, #4
 8000cc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689a      	ldr	r2, [r3, #8]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	691b      	ldr	r3, [r3, #16]
 8000cd6:	431a      	orrs	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	695b      	ldr	r3, [r3, #20]
 8000cdc:	ea42 0103 	orr.w	r1, r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	1e5a      	subs	r2, r3, #1
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	430a      	orrs	r2, r1
 8000cec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b087      	sub	sp, #28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d1e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d20:	7cfb      	ldrb	r3, [r7, #19]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d003      	beq.n	8000d2e <HAL_CAN_ConfigFilter+0x26>
 8000d26:	7cfb      	ldrb	r3, [r7, #19]
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	f040 80be 	bne.w	8000eaa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000d2e:	4b65      	ldr	r3, [pc, #404]	; (8000ec4 <HAL_CAN_ConfigFilter+0x1bc>)
 8000d30:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d38:	f043 0201 	orr.w	r2, r3, #1
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d48:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5c:	021b      	lsls	r3, r3, #8
 8000d5e:	431a      	orrs	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	f003 031f 	and.w	r3, r3, #31
 8000d6e:	2201      	movs	r2, #1
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	401a      	ands	r2, r3
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	69db      	ldr	r3, [r3, #28]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d123      	bne.n	8000dd8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dae:	683a      	ldr	r2, [r7, #0]
 8000db0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000db2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	3248      	adds	r2, #72	; 0x48
 8000db8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dcc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dce:	6979      	ldr	r1, [r7, #20]
 8000dd0:	3348      	adds	r3, #72	; 0x48
 8000dd2:	00db      	lsls	r3, r3, #3
 8000dd4:	440b      	add	r3, r1
 8000dd6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	69db      	ldr	r3, [r3, #28]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d122      	bne.n	8000e26 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	431a      	orrs	r2, r3
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dfc:	683a      	ldr	r2, [r7, #0]
 8000dfe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e00:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3248      	adds	r2, #72	; 0x48
 8000e06:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e1a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e1c:	6979      	ldr	r1, [r7, #20]
 8000e1e:	3348      	adds	r3, #72	; 0x48
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	440b      	add	r3, r1
 8000e24:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d109      	bne.n	8000e42 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	43db      	mvns	r3, r3
 8000e38:	401a      	ands	r2, r3
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000e40:	e007      	b.n	8000e52 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	691b      	ldr	r3, [r3, #16]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d109      	bne.n	8000e6e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	401a      	ands	r2, r3
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000e6c:	e007      	b.n	8000e7e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	431a      	orrs	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	6a1b      	ldr	r3, [r3, #32]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d107      	bne.n	8000e96 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e9c:	f023 0201 	bic.w	r2, r3, #1
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e006      	b.n	8000eb8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
  }
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	371c      	adds	r7, #28
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	40006400 	.word	0x40006400

08000ec8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d12e      	bne.n	8000f3a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2202      	movs	r2, #2
 8000ee0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 0201 	bic.w	r2, r2, #1
 8000ef2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ef4:	f7ff fe00 	bl	8000af8 <HAL_GetTick>
 8000ef8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000efa:	e012      	b.n	8000f22 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000efc:	f7ff fdfc 	bl	8000af8 <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b0a      	cmp	r3, #10
 8000f08:	d90b      	bls.n	8000f22 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2205      	movs	r2, #5
 8000f1a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e012      	b.n	8000f48 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1e5      	bne.n	8000efc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e006      	b.n	8000f48 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
  }
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f64:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f6e:	7ffb      	ldrb	r3, [r7, #31]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d003      	beq.n	8000f7c <HAL_CAN_AddTxMessage+0x2c>
 8000f74:	7ffb      	ldrb	r3, [r7, #31]
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	f040 80b8 	bne.w	80010ec <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10a      	bne.n	8000f9c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d105      	bne.n	8000f9c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 80a0 	beq.w	80010dc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	0e1b      	lsrs	r3, r3, #24
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d907      	bls.n	8000fbc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e09e      	b.n	80010fa <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	409a      	lsls	r2, r3
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10d      	bne.n	8000fea <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000fd8:	68f9      	ldr	r1, [r7, #12]
 8000fda:	6809      	ldr	r1, [r1, #0]
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3318      	adds	r3, #24
 8000fe2:	011b      	lsls	r3, r3, #4
 8000fe4:	440b      	add	r3, r1
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	e00f      	b.n	800100a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ff4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ffa:	68f9      	ldr	r1, [r7, #12]
 8000ffc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000ffe:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	3318      	adds	r3, #24
 8001004:	011b      	lsls	r3, r3, #4
 8001006:	440b      	add	r3, r1
 8001008:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6819      	ldr	r1, [r3, #0]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	691a      	ldr	r2, [r3, #16]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3318      	adds	r3, #24
 8001016:	011b      	lsls	r3, r3, #4
 8001018:	440b      	add	r3, r1
 800101a:	3304      	adds	r3, #4
 800101c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	7d1b      	ldrb	r3, [r3, #20]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d111      	bne.n	800104a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	3318      	adds	r3, #24
 800102e:	011b      	lsls	r3, r3, #4
 8001030:	4413      	add	r3, r2
 8001032:	3304      	adds	r3, #4
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	6811      	ldr	r1, [r2, #0]
 800103a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3318      	adds	r3, #24
 8001042:	011b      	lsls	r3, r3, #4
 8001044:	440b      	add	r3, r1
 8001046:	3304      	adds	r3, #4
 8001048:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3307      	adds	r3, #7
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	061a      	lsls	r2, r3, #24
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3306      	adds	r3, #6
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	041b      	lsls	r3, r3, #16
 800105a:	431a      	orrs	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3305      	adds	r3, #5
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	4313      	orrs	r3, r2
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	3204      	adds	r2, #4
 800106a:	7812      	ldrb	r2, [r2, #0]
 800106c:	4610      	mov	r0, r2
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	6811      	ldr	r1, [r2, #0]
 8001072:	ea43 0200 	orr.w	r2, r3, r0
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	011b      	lsls	r3, r3, #4
 800107a:	440b      	add	r3, r1
 800107c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001080:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3303      	adds	r3, #3
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	061a      	lsls	r2, r3, #24
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3302      	adds	r3, #2
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	041b      	lsls	r3, r3, #16
 8001092:	431a      	orrs	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3301      	adds	r3, #1
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	4313      	orrs	r3, r2
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	7812      	ldrb	r2, [r2, #0]
 80010a2:	4610      	mov	r0, r2
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	6811      	ldr	r1, [r2, #0]
 80010a8:	ea43 0200 	orr.w	r2, r3, r0
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	011b      	lsls	r3, r3, #4
 80010b0:	440b      	add	r3, r1
 80010b2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80010b6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	3318      	adds	r3, #24
 80010c0:	011b      	lsls	r3, r3, #4
 80010c2:	4413      	add	r3, r2
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	6811      	ldr	r1, [r2, #0]
 80010ca:	f043 0201 	orr.w	r2, r3, #1
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3318      	adds	r3, #24
 80010d2:	011b      	lsls	r3, r3, #4
 80010d4:	440b      	add	r3, r1
 80010d6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	e00e      	b.n	80010fa <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e006      	b.n	80010fa <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
  }
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3724      	adds	r7, #36	; 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001106:	b480      	push	{r7}
 8001108:	b087      	sub	sp, #28
 800110a:	af00      	add	r7, sp, #0
 800110c:	60f8      	str	r0, [r7, #12]
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f893 3020 	ldrb.w	r3, [r3, #32]
 800111a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800111c:	7dfb      	ldrb	r3, [r7, #23]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d003      	beq.n	800112a <HAL_CAN_GetRxMessage+0x24>
 8001122:	7dfb      	ldrb	r3, [r7, #23]
 8001124:	2b02      	cmp	r3, #2
 8001126:	f040 80f3 	bne.w	8001310 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d10e      	bne.n	800114e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d116      	bne.n	800116c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e0e7      	b.n	800131e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b00      	cmp	r3, #0
 800115a:	d107      	bne.n	800116c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001160:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e0d8      	b.n	800131e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	331b      	adds	r3, #27
 8001174:	011b      	lsls	r3, r3, #4
 8001176:	4413      	add	r3, r2
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0204 	and.w	r2, r3, #4
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10c      	bne.n	80011a4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	331b      	adds	r3, #27
 8001192:	011b      	lsls	r3, r3, #4
 8001194:	4413      	add	r3, r2
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	0d5b      	lsrs	r3, r3, #21
 800119a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	e00b      	b.n	80011bc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	331b      	adds	r3, #27
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	4413      	add	r3, r2
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	08db      	lsrs	r3, r3, #3
 80011b4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	331b      	adds	r3, #27
 80011c4:	011b      	lsls	r3, r3, #4
 80011c6:	4413      	add	r3, r2
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0202 	and.w	r2, r3, #2
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	331b      	adds	r3, #27
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	4413      	add	r3, r2
 80011de:	3304      	adds	r3, #4
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 020f 	and.w	r2, r3, #15
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	331b      	adds	r3, #27
 80011f2:	011b      	lsls	r3, r3, #4
 80011f4:	4413      	add	r3, r2
 80011f6:	3304      	adds	r3, #4
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	0a1b      	lsrs	r3, r3, #8
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	331b      	adds	r3, #27
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	4413      	add	r3, r2
 800120e:	3304      	adds	r3, #4
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	0c1b      	lsrs	r3, r3, #16
 8001214:	b29a      	uxth	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	011b      	lsls	r3, r3, #4
 8001222:	4413      	add	r3, r2
 8001224:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	b2da      	uxtb	r2, r3
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	011b      	lsls	r3, r3, #4
 8001238:	4413      	add	r3, r2
 800123a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	0a1a      	lsrs	r2, r3, #8
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	4413      	add	r3, r2
 8001254:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	0c1a      	lsrs	r2, r3, #16
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	3302      	adds	r3, #2
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	4413      	add	r3, r2
 800126e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	0e1a      	lsrs	r2, r3, #24
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	3303      	adds	r3, #3
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	011b      	lsls	r3, r3, #4
 8001286:	4413      	add	r3, r2
 8001288:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	3304      	adds	r3, #4
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	4413      	add	r3, r2
 80012a0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	0a1a      	lsrs	r2, r3, #8
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	3305      	adds	r3, #5
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	4413      	add	r3, r2
 80012ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	0c1a      	lsrs	r2, r3, #16
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	3306      	adds	r3, #6
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	011b      	lsls	r3, r3, #4
 80012d2:	4413      	add	r3, r2
 80012d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	0e1a      	lsrs	r2, r3, #24
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	3307      	adds	r3, #7
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d108      	bne.n	80012fc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68da      	ldr	r2, [r3, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f042 0220 	orr.w	r2, r2, #32
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	e007      	b.n	800130c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	691a      	ldr	r2, [r3, #16]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f042 0220 	orr.w	r2, r2, #32
 800130a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	e006      	b.n	800131e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
  }
}
 800131e:	4618      	mov	r0, r3
 8001320:	371c      	adds	r7, #28
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800132a:	b480      	push	{r7}
 800132c:	b085      	sub	sp, #20
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3020 	ldrb.w	r3, [r3, #32]
 800133a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d002      	beq.n	8001348 <HAL_CAN_ActivateNotification+0x1e>
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d109      	bne.n	800135c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6959      	ldr	r1, [r3, #20]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	430a      	orrs	r2, r1
 8001356:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	e006      	b.n	800136a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001360:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
  }
}
 800136a:	4618      	mov	r0, r3
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b08a      	sub	sp, #40	; 0x28
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800137e:	2300      	movs	r3, #0
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d07c      	beq.n	80014b6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d023      	beq.n	800140e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2201      	movs	r2, #1
 80013cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 f983 	bl	80016e4 <HAL_CAN_TxMailbox0CompleteCallback>
 80013de:	e016      	b.n	800140e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d004      	beq.n	80013f4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
 80013f2:	e00c      	b.n	800140e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d004      	beq.n	8001408 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
 8001406:	e002      	b.n	800140e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f989 	bl	8001720 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001414:	2b00      	cmp	r3, #0
 8001416:	d024      	beq.n	8001462 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001420:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 f963 	bl	80016f8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001432:	e016      	b.n	8001462 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800143a:	2b00      	cmp	r3, #0
 800143c:	d004      	beq.n	8001448 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
 8001446:	e00c      	b.n	8001462 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800144e:	2b00      	cmp	r3, #0
 8001450:	d004      	beq.n	800145c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
 800145a:	e002      	b.n	8001462 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f969 	bl	8001734 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d024      	beq.n	80014b6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001474:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 f943 	bl	800170c <HAL_CAN_TxMailbox2CompleteCallback>
 8001486:	e016      	b.n	80014b6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d004      	beq.n	800149c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
 800149a:	e00c      	b.n	80014b6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d004      	beq.n	80014b0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
 80014ae:	e002      	b.n	80014b6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 f949 	bl	8001748 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	f003 0308 	and.w	r3, r3, #8
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00c      	beq.n	80014da <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d007      	beq.n	80014da <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2210      	movs	r2, #16
 80014d8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00b      	beq.n	80014fc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d006      	beq.n	80014fc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2208      	movs	r2, #8
 80014f4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f93a 	bl	8001770 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d009      	beq.n	800151a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d002      	beq.n	800151a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f921 	bl	800175c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800151a:	6a3b      	ldr	r3, [r7, #32]
 800151c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00c      	beq.n	800153e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	2b00      	cmp	r3, #0
 800152c:	d007      	beq.n	800153e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001534:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2210      	movs	r2, #16
 800153c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800153e:	6a3b      	ldr	r3, [r7, #32]
 8001540:	f003 0320 	and.w	r3, r3, #32
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00b      	beq.n	8001560 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d006      	beq.n	8001560 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2208      	movs	r2, #8
 8001558:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f91c 	bl	8001798 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001560:	6a3b      	ldr	r3, [r7, #32]
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	2b00      	cmp	r3, #0
 8001568:	d009      	beq.n	800157e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	2b00      	cmp	r3, #0
 8001576:	d002      	beq.n	800157e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f000 f903 	bl	8001784 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00b      	beq.n	80015a0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f003 0310 	and.w	r3, r3, #16
 800158e:	2b00      	cmp	r3, #0
 8001590:	d006      	beq.n	80015a0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2210      	movs	r2, #16
 8001598:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f906 	bl	80017ac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80015a0:	6a3b      	ldr	r3, [r7, #32]
 80015a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00b      	beq.n	80015c2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	f003 0308 	and.w	r3, r3, #8
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d006      	beq.n	80015c2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2208      	movs	r2, #8
 80015ba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f8ff 	bl	80017c0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80015c2:	6a3b      	ldr	r3, [r7, #32]
 80015c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d07b      	beq.n	80016c4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d072      	beq.n	80016bc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d008      	beq.n	80015f2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015f2:	6a3b      	ldr	r3, [r7, #32]
 80015f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d008      	beq.n	800160e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001614:	2b00      	cmp	r3, #0
 8001616:	d008      	beq.n	800162a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800162a:	6a3b      	ldr	r3, [r7, #32]
 800162c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001630:	2b00      	cmp	r3, #0
 8001632:	d043      	beq.n	80016bc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800163a:	2b00      	cmp	r3, #0
 800163c:	d03e      	beq.n	80016bc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001644:	2b60      	cmp	r3, #96	; 0x60
 8001646:	d02b      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x32a>
 8001648:	2b60      	cmp	r3, #96	; 0x60
 800164a:	d82e      	bhi.n	80016aa <HAL_CAN_IRQHandler+0x334>
 800164c:	2b50      	cmp	r3, #80	; 0x50
 800164e:	d022      	beq.n	8001696 <HAL_CAN_IRQHandler+0x320>
 8001650:	2b50      	cmp	r3, #80	; 0x50
 8001652:	d82a      	bhi.n	80016aa <HAL_CAN_IRQHandler+0x334>
 8001654:	2b40      	cmp	r3, #64	; 0x40
 8001656:	d019      	beq.n	800168c <HAL_CAN_IRQHandler+0x316>
 8001658:	2b40      	cmp	r3, #64	; 0x40
 800165a:	d826      	bhi.n	80016aa <HAL_CAN_IRQHandler+0x334>
 800165c:	2b30      	cmp	r3, #48	; 0x30
 800165e:	d010      	beq.n	8001682 <HAL_CAN_IRQHandler+0x30c>
 8001660:	2b30      	cmp	r3, #48	; 0x30
 8001662:	d822      	bhi.n	80016aa <HAL_CAN_IRQHandler+0x334>
 8001664:	2b10      	cmp	r3, #16
 8001666:	d002      	beq.n	800166e <HAL_CAN_IRQHandler+0x2f8>
 8001668:	2b20      	cmp	r3, #32
 800166a:	d005      	beq.n	8001678 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800166c:	e01d      	b.n	80016aa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	f043 0308 	orr.w	r3, r3, #8
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001676:	e019      	b.n	80016ac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	f043 0310 	orr.w	r3, r3, #16
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001680:	e014      	b.n	80016ac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	f043 0320 	orr.w	r3, r3, #32
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800168a:	e00f      	b.n	80016ac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001694:	e00a      	b.n	80016ac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800169e:	e005      	b.n	80016ac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016a8:	e000      	b.n	80016ac <HAL_CAN_IRQHandler+0x336>
            break;
 80016aa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	699a      	ldr	r2, [r3, #24]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80016ba:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2204      	movs	r2, #4
 80016c2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d008      	beq.n	80016dc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	431a      	orrs	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f87c 	bl	80017d4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80016dc:	bf00      	nop
 80016de:	3728      	adds	r7, #40	; 0x28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181a:	4a04      	ldr	r2, [pc, #16]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	60d3      	str	r3, [r2, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <__NVIC_GetPriorityGrouping+0x18>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 0307 	and.w	r3, r3, #7
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	2b00      	cmp	r3, #0
 800185c:	db0b      	blt.n	8001876 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f003 021f 	and.w	r2, r3, #31
 8001864:	4907      	ldr	r1, [pc, #28]	; (8001884 <__NVIC_EnableIRQ+0x38>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	2001      	movs	r0, #1
 800186e:	fa00 f202 	lsl.w	r2, r0, r2
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000e100 	.word	0xe000e100

08001888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	6039      	str	r1, [r7, #0]
 8001892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001898:	2b00      	cmp	r3, #0
 800189a:	db0a      	blt.n	80018b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	490c      	ldr	r1, [pc, #48]	; (80018d4 <__NVIC_SetPriority+0x4c>)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	0112      	lsls	r2, r2, #4
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	440b      	add	r3, r1
 80018ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b0:	e00a      	b.n	80018c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4908      	ldr	r1, [pc, #32]	; (80018d8 <__NVIC_SetPriority+0x50>)
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	3b04      	subs	r3, #4
 80018c0:	0112      	lsls	r2, r2, #4
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	440b      	add	r3, r1
 80018c6:	761a      	strb	r2, [r3, #24]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000e100 	.word	0xe000e100
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	; 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f1c3 0307 	rsb	r3, r3, #7
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	bf28      	it	cs
 80018fa:	2304      	movcs	r3, #4
 80018fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3304      	adds	r3, #4
 8001902:	2b06      	cmp	r3, #6
 8001904:	d902      	bls.n	800190c <NVIC_EncodePriority+0x30>
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3b03      	subs	r3, #3
 800190a:	e000      	b.n	800190e <NVIC_EncodePriority+0x32>
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	f04f 32ff 	mov.w	r2, #4294967295
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43da      	mvns	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	401a      	ands	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001924:	f04f 31ff 	mov.w	r1, #4294967295
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa01 f303 	lsl.w	r3, r1, r3
 800192e:	43d9      	mvns	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	4313      	orrs	r3, r2
         );
}
 8001936:	4618      	mov	r0, r3
 8001938:	3724      	adds	r7, #36	; 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3b01      	subs	r3, #1
 8001950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001954:	d301      	bcc.n	800195a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001956:	2301      	movs	r3, #1
 8001958:	e00f      	b.n	800197a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195a:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <SysTick_Config+0x40>)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b01      	subs	r3, #1
 8001960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001962:	210f      	movs	r1, #15
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
 8001968:	f7ff ff8e 	bl	8001888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <SysTick_Config+0x40>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001972:	4b04      	ldr	r3, [pc, #16]	; (8001984 <SysTick_Config+0x40>)
 8001974:	2207      	movs	r2, #7
 8001976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	e000e010 	.word	0xe000e010

08001988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ff29 	bl	80017e8 <__NVIC_SetPriorityGrouping>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b0:	f7ff ff3e 	bl	8001830 <__NVIC_GetPriorityGrouping>
 80019b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	68b9      	ldr	r1, [r7, #8]
 80019ba:	6978      	ldr	r0, [r7, #20]
 80019bc:	f7ff ff8e 	bl	80018dc <NVIC_EncodePriority>
 80019c0:	4602      	mov	r2, r0
 80019c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff5d 	bl	8001888 <__NVIC_SetPriority>
}
 80019ce:	bf00      	nop
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff31 	bl	800184c <__NVIC_EnableIRQ>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ffa2 	bl	8001944 <SysTick_Config>
 8001a00:	4603      	mov	r3, r0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b089      	sub	sp, #36	; 0x24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
 8001a26:	e165      	b.n	8001cf4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a28:	2201      	movs	r2, #1
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	f040 8154 	bne.w	8001cee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d005      	beq.n	8001a5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d130      	bne.n	8001ac0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	2203      	movs	r2, #3
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a94:	2201      	movs	r2, #1
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	091b      	lsrs	r3, r3, #4
 8001aaa:	f003 0201 	and.w	r2, r3, #1
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d017      	beq.n	8001afc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d123      	bne.n	8001b50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	08da      	lsrs	r2, r3, #3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3208      	adds	r2, #8
 8001b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	220f      	movs	r2, #15
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	691a      	ldr	r2, [r3, #16]
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	08da      	lsrs	r2, r3, #3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3208      	adds	r2, #8
 8001b4a:	69b9      	ldr	r1, [r7, #24]
 8001b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0203 	and.w	r2, r3, #3
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 80ae 	beq.w	8001cee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b5d      	ldr	r3, [pc, #372]	; (8001d0c <HAL_GPIO_Init+0x300>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	4a5c      	ldr	r2, [pc, #368]	; (8001d0c <HAL_GPIO_Init+0x300>)
 8001b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba2:	4b5a      	ldr	r3, [pc, #360]	; (8001d0c <HAL_GPIO_Init+0x300>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bae:	4a58      	ldr	r2, [pc, #352]	; (8001d10 <HAL_GPIO_Init+0x304>)
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	089b      	lsrs	r3, r3, #2
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	220f      	movs	r2, #15
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a4f      	ldr	r2, [pc, #316]	; (8001d14 <HAL_GPIO_Init+0x308>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d025      	beq.n	8001c26 <HAL_GPIO_Init+0x21a>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a4e      	ldr	r2, [pc, #312]	; (8001d18 <HAL_GPIO_Init+0x30c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d01f      	beq.n	8001c22 <HAL_GPIO_Init+0x216>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a4d      	ldr	r2, [pc, #308]	; (8001d1c <HAL_GPIO_Init+0x310>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d019      	beq.n	8001c1e <HAL_GPIO_Init+0x212>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a4c      	ldr	r2, [pc, #304]	; (8001d20 <HAL_GPIO_Init+0x314>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d013      	beq.n	8001c1a <HAL_GPIO_Init+0x20e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a4b      	ldr	r2, [pc, #300]	; (8001d24 <HAL_GPIO_Init+0x318>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00d      	beq.n	8001c16 <HAL_GPIO_Init+0x20a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4a      	ldr	r2, [pc, #296]	; (8001d28 <HAL_GPIO_Init+0x31c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d007      	beq.n	8001c12 <HAL_GPIO_Init+0x206>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a49      	ldr	r2, [pc, #292]	; (8001d2c <HAL_GPIO_Init+0x320>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d101      	bne.n	8001c0e <HAL_GPIO_Init+0x202>
 8001c0a:	2306      	movs	r3, #6
 8001c0c:	e00c      	b.n	8001c28 <HAL_GPIO_Init+0x21c>
 8001c0e:	2307      	movs	r3, #7
 8001c10:	e00a      	b.n	8001c28 <HAL_GPIO_Init+0x21c>
 8001c12:	2305      	movs	r3, #5
 8001c14:	e008      	b.n	8001c28 <HAL_GPIO_Init+0x21c>
 8001c16:	2304      	movs	r3, #4
 8001c18:	e006      	b.n	8001c28 <HAL_GPIO_Init+0x21c>
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e004      	b.n	8001c28 <HAL_GPIO_Init+0x21c>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e002      	b.n	8001c28 <HAL_GPIO_Init+0x21c>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_GPIO_Init+0x21c>
 8001c26:	2300      	movs	r3, #0
 8001c28:	69fa      	ldr	r2, [r7, #28]
 8001c2a:	f002 0203 	and.w	r2, r2, #3
 8001c2e:	0092      	lsls	r2, r2, #2
 8001c30:	4093      	lsls	r3, r2
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c38:	4935      	ldr	r1, [pc, #212]	; (8001d10 <HAL_GPIO_Init+0x304>)
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	089b      	lsrs	r3, r3, #2
 8001c3e:	3302      	adds	r3, #2
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c46:	4b3a      	ldr	r3, [pc, #232]	; (8001d30 <HAL_GPIO_Init+0x324>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c6a:	4a31      	ldr	r2, [pc, #196]	; (8001d30 <HAL_GPIO_Init+0x324>)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c70:	4b2f      	ldr	r3, [pc, #188]	; (8001d30 <HAL_GPIO_Init+0x324>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c94:	4a26      	ldr	r2, [pc, #152]	; (8001d30 <HAL_GPIO_Init+0x324>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c9a:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <HAL_GPIO_Init+0x324>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cbe:	4a1c      	ldr	r2, [pc, #112]	; (8001d30 <HAL_GPIO_Init+0x324>)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc4:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <HAL_GPIO_Init+0x324>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ce8:	4a11      	ldr	r2, [pc, #68]	; (8001d30 <HAL_GPIO_Init+0x324>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	61fb      	str	r3, [r7, #28]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	2b0f      	cmp	r3, #15
 8001cf8:	f67f ae96 	bls.w	8001a28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
 8001d00:	3724      	adds	r7, #36	; 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40013800 	.word	0x40013800
 8001d14:	40020000 	.word	0x40020000
 8001d18:	40020400 	.word	0x40020400
 8001d1c:	40020800 	.word	0x40020800
 8001d20:	40020c00 	.word	0x40020c00
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40021400 	.word	0x40021400
 8001d2c:	40021800 	.word	0x40021800
 8001d30:	40013c00 	.word	0x40013c00

08001d34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	887b      	ldrh	r3, [r7, #2]
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d002      	beq.n	8001d52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	73fb      	strb	r3, [r7, #15]
 8001d50:	e001      	b.n	8001d56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	807b      	strh	r3, [r7, #2]
 8001d70:	4613      	mov	r3, r2
 8001d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d74:	787b      	ldrb	r3, [r7, #1]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d7a:	887a      	ldrh	r2, [r7, #2]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d80:	e003      	b.n	8001d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	041a      	lsls	r2, r3, #16
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	619a      	str	r2, [r3, #24]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001da2:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001da4:	695a      	ldr	r2, [r3, #20]
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d006      	beq.n	8001dbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dae:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001db0:	88fb      	ldrh	r3, [r7, #6]
 8001db2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 f806 	bl	8001dc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40013c00 	.word	0x40013c00

08001dc8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0cc      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df4:	4b68      	ldr	r3, [pc, #416]	; (8001f98 <HAL_RCC_ClockConfig+0x1b8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d90c      	bls.n	8001e1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	4b65      	ldr	r3, [pc, #404]	; (8001f98 <HAL_RCC_ClockConfig+0x1b8>)
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0a:	4b63      	ldr	r3, [pc, #396]	; (8001f98 <HAL_RCC_ClockConfig+0x1b8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d001      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0b8      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d020      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e34:	4b59      	ldr	r3, [pc, #356]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	4a58      	ldr	r2, [pc, #352]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e4c:	4b53      	ldr	r3, [pc, #332]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4a52      	ldr	r2, [pc, #328]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e58:	4b50      	ldr	r3, [pc, #320]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	494d      	ldr	r1, [pc, #308]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d044      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d107      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7e:	4b47      	ldr	r3, [pc, #284]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d119      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e07f      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d003      	beq.n	8001e9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d107      	bne.n	8001eae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9e:	4b3f      	ldr	r3, [pc, #252]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d109      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e06f      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eae:	4b3b      	ldr	r3, [pc, #236]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e067      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ebe:	4b37      	ldr	r3, [pc, #220]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f023 0203 	bic.w	r2, r3, #3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4934      	ldr	r1, [pc, #208]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ed0:	f7fe fe12 	bl	8000af8 <HAL_GetTick>
 8001ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed6:	e00a      	b.n	8001eee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed8:	f7fe fe0e 	bl	8000af8 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e04f      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eee:	4b2b      	ldr	r3, [pc, #172]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 020c 	and.w	r2, r3, #12
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d1eb      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f00:	4b25      	ldr	r3, [pc, #148]	; (8001f98 <HAL_RCC_ClockConfig+0x1b8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d20c      	bcs.n	8001f28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	4b22      	ldr	r3, [pc, #136]	; (8001f98 <HAL_RCC_ClockConfig+0x1b8>)
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f16:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <HAL_RCC_ClockConfig+0x1b8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e032      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d008      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f34:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4916      	ldr	r1, [pc, #88]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d009      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f52:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	490e      	ldr	r1, [pc, #56]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f66:	f000 f821 	bl	8001fac <HAL_RCC_GetSysClockFreq>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	490a      	ldr	r1, [pc, #40]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f78:	5ccb      	ldrb	r3, [r1, r3]
 8001f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7e:	4a09      	ldr	r2, [pc, #36]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe fd72 	bl	8000a70 <HAL_InitTick>

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40023c00 	.word	0x40023c00
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	080029b8 	.word	0x080029b8
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	20000004 	.word	0x20000004

08001fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fb0:	b0ae      	sub	sp, #184	; 0xb8
 8001fb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fd2:	4bcb      	ldr	r3, [pc, #812]	; (8002300 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	2b0c      	cmp	r3, #12
 8001fdc:	f200 8206 	bhi.w	80023ec <HAL_RCC_GetSysClockFreq+0x440>
 8001fe0:	a201      	add	r2, pc, #4	; (adr r2, 8001fe8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe6:	bf00      	nop
 8001fe8:	0800201d 	.word	0x0800201d
 8001fec:	080023ed 	.word	0x080023ed
 8001ff0:	080023ed 	.word	0x080023ed
 8001ff4:	080023ed 	.word	0x080023ed
 8001ff8:	08002025 	.word	0x08002025
 8001ffc:	080023ed 	.word	0x080023ed
 8002000:	080023ed 	.word	0x080023ed
 8002004:	080023ed 	.word	0x080023ed
 8002008:	0800202d 	.word	0x0800202d
 800200c:	080023ed 	.word	0x080023ed
 8002010:	080023ed 	.word	0x080023ed
 8002014:	080023ed 	.word	0x080023ed
 8002018:	0800221d 	.word	0x0800221d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800201c:	4bb9      	ldr	r3, [pc, #740]	; (8002304 <HAL_RCC_GetSysClockFreq+0x358>)
 800201e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002022:	e1e7      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002024:	4bb8      	ldr	r3, [pc, #736]	; (8002308 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002026:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800202a:	e1e3      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800202c:	4bb4      	ldr	r3, [pc, #720]	; (8002300 <HAL_RCC_GetSysClockFreq+0x354>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002034:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002038:	4bb1      	ldr	r3, [pc, #708]	; (8002300 <HAL_RCC_GetSysClockFreq+0x354>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d071      	beq.n	8002128 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002044:	4bae      	ldr	r3, [pc, #696]	; (8002300 <HAL_RCC_GetSysClockFreq+0x354>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	099b      	lsrs	r3, r3, #6
 800204a:	2200      	movs	r2, #0
 800204c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002050:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002054:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800205c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002060:	2300      	movs	r3, #0
 8002062:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002066:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800206a:	4622      	mov	r2, r4
 800206c:	462b      	mov	r3, r5
 800206e:	f04f 0000 	mov.w	r0, #0
 8002072:	f04f 0100 	mov.w	r1, #0
 8002076:	0159      	lsls	r1, r3, #5
 8002078:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800207c:	0150      	lsls	r0, r2, #5
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4621      	mov	r1, r4
 8002084:	1a51      	subs	r1, r2, r1
 8002086:	6439      	str	r1, [r7, #64]	; 0x40
 8002088:	4629      	mov	r1, r5
 800208a:	eb63 0301 	sbc.w	r3, r3, r1
 800208e:	647b      	str	r3, [r7, #68]	; 0x44
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800209c:	4649      	mov	r1, r9
 800209e:	018b      	lsls	r3, r1, #6
 80020a0:	4641      	mov	r1, r8
 80020a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020a6:	4641      	mov	r1, r8
 80020a8:	018a      	lsls	r2, r1, #6
 80020aa:	4641      	mov	r1, r8
 80020ac:	1a51      	subs	r1, r2, r1
 80020ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80020b0:	4649      	mov	r1, r9
 80020b2:	eb63 0301 	sbc.w	r3, r3, r1
 80020b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80020c4:	4649      	mov	r1, r9
 80020c6:	00cb      	lsls	r3, r1, #3
 80020c8:	4641      	mov	r1, r8
 80020ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020ce:	4641      	mov	r1, r8
 80020d0:	00ca      	lsls	r2, r1, #3
 80020d2:	4610      	mov	r0, r2
 80020d4:	4619      	mov	r1, r3
 80020d6:	4603      	mov	r3, r0
 80020d8:	4622      	mov	r2, r4
 80020da:	189b      	adds	r3, r3, r2
 80020dc:	633b      	str	r3, [r7, #48]	; 0x30
 80020de:	462b      	mov	r3, r5
 80020e0:	460a      	mov	r2, r1
 80020e2:	eb42 0303 	adc.w	r3, r2, r3
 80020e6:	637b      	str	r3, [r7, #52]	; 0x34
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80020f4:	4629      	mov	r1, r5
 80020f6:	024b      	lsls	r3, r1, #9
 80020f8:	4621      	mov	r1, r4
 80020fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020fe:	4621      	mov	r1, r4
 8002100:	024a      	lsls	r2, r1, #9
 8002102:	4610      	mov	r0, r2
 8002104:	4619      	mov	r1, r3
 8002106:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800210a:	2200      	movs	r2, #0
 800210c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002110:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002114:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002118:	f7fe f874 	bl	8000204 <__aeabi_uldivmod>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4613      	mov	r3, r2
 8002122:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002126:	e067      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002128:	4b75      	ldr	r3, [pc, #468]	; (8002300 <HAL_RCC_GetSysClockFreq+0x354>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	099b      	lsrs	r3, r3, #6
 800212e:	2200      	movs	r2, #0
 8002130:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002134:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002138:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800213c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002140:	67bb      	str	r3, [r7, #120]	; 0x78
 8002142:	2300      	movs	r3, #0
 8002144:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002146:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800214a:	4622      	mov	r2, r4
 800214c:	462b      	mov	r3, r5
 800214e:	f04f 0000 	mov.w	r0, #0
 8002152:	f04f 0100 	mov.w	r1, #0
 8002156:	0159      	lsls	r1, r3, #5
 8002158:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800215c:	0150      	lsls	r0, r2, #5
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4621      	mov	r1, r4
 8002164:	1a51      	subs	r1, r2, r1
 8002166:	62b9      	str	r1, [r7, #40]	; 0x28
 8002168:	4629      	mov	r1, r5
 800216a:	eb63 0301 	sbc.w	r3, r3, r1
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	f04f 0300 	mov.w	r3, #0
 8002178:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800217c:	4649      	mov	r1, r9
 800217e:	018b      	lsls	r3, r1, #6
 8002180:	4641      	mov	r1, r8
 8002182:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002186:	4641      	mov	r1, r8
 8002188:	018a      	lsls	r2, r1, #6
 800218a:	4641      	mov	r1, r8
 800218c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002190:	4649      	mov	r1, r9
 8002192:	eb63 0b01 	sbc.w	fp, r3, r1
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021aa:	4692      	mov	sl, r2
 80021ac:	469b      	mov	fp, r3
 80021ae:	4623      	mov	r3, r4
 80021b0:	eb1a 0303 	adds.w	r3, sl, r3
 80021b4:	623b      	str	r3, [r7, #32]
 80021b6:	462b      	mov	r3, r5
 80021b8:	eb4b 0303 	adc.w	r3, fp, r3
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80021ca:	4629      	mov	r1, r5
 80021cc:	028b      	lsls	r3, r1, #10
 80021ce:	4621      	mov	r1, r4
 80021d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021d4:	4621      	mov	r1, r4
 80021d6:	028a      	lsls	r2, r1, #10
 80021d8:	4610      	mov	r0, r2
 80021da:	4619      	mov	r1, r3
 80021dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021e0:	2200      	movs	r2, #0
 80021e2:	673b      	str	r3, [r7, #112]	; 0x70
 80021e4:	677a      	str	r2, [r7, #116]	; 0x74
 80021e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80021ea:	f7fe f80b 	bl	8000204 <__aeabi_uldivmod>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4613      	mov	r3, r2
 80021f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021f8:	4b41      	ldr	r3, [pc, #260]	; (8002300 <HAL_RCC_GetSysClockFreq+0x354>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	0c1b      	lsrs	r3, r3, #16
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	3301      	adds	r3, #1
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800220a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800220e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002212:	fbb2 f3f3 	udiv	r3, r2, r3
 8002216:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800221a:	e0eb      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800221c:	4b38      	ldr	r3, [pc, #224]	; (8002300 <HAL_RCC_GetSysClockFreq+0x354>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002224:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002228:	4b35      	ldr	r3, [pc, #212]	; (8002300 <HAL_RCC_GetSysClockFreq+0x354>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d06b      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002234:	4b32      	ldr	r3, [pc, #200]	; (8002300 <HAL_RCC_GetSysClockFreq+0x354>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	099b      	lsrs	r3, r3, #6
 800223a:	2200      	movs	r2, #0
 800223c:	66bb      	str	r3, [r7, #104]	; 0x68
 800223e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002240:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002246:	663b      	str	r3, [r7, #96]	; 0x60
 8002248:	2300      	movs	r3, #0
 800224a:	667b      	str	r3, [r7, #100]	; 0x64
 800224c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002250:	4622      	mov	r2, r4
 8002252:	462b      	mov	r3, r5
 8002254:	f04f 0000 	mov.w	r0, #0
 8002258:	f04f 0100 	mov.w	r1, #0
 800225c:	0159      	lsls	r1, r3, #5
 800225e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002262:	0150      	lsls	r0, r2, #5
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4621      	mov	r1, r4
 800226a:	1a51      	subs	r1, r2, r1
 800226c:	61b9      	str	r1, [r7, #24]
 800226e:	4629      	mov	r1, r5
 8002270:	eb63 0301 	sbc.w	r3, r3, r1
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	f04f 0300 	mov.w	r3, #0
 800227e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002282:	4659      	mov	r1, fp
 8002284:	018b      	lsls	r3, r1, #6
 8002286:	4651      	mov	r1, sl
 8002288:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800228c:	4651      	mov	r1, sl
 800228e:	018a      	lsls	r2, r1, #6
 8002290:	4651      	mov	r1, sl
 8002292:	ebb2 0801 	subs.w	r8, r2, r1
 8002296:	4659      	mov	r1, fp
 8002298:	eb63 0901 	sbc.w	r9, r3, r1
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022b0:	4690      	mov	r8, r2
 80022b2:	4699      	mov	r9, r3
 80022b4:	4623      	mov	r3, r4
 80022b6:	eb18 0303 	adds.w	r3, r8, r3
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	462b      	mov	r3, r5
 80022be:	eb49 0303 	adc.w	r3, r9, r3
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80022d0:	4629      	mov	r1, r5
 80022d2:	024b      	lsls	r3, r1, #9
 80022d4:	4621      	mov	r1, r4
 80022d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022da:	4621      	mov	r1, r4
 80022dc:	024a      	lsls	r2, r1, #9
 80022de:	4610      	mov	r0, r2
 80022e0:	4619      	mov	r1, r3
 80022e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022e6:	2200      	movs	r2, #0
 80022e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80022ea:	65fa      	str	r2, [r7, #92]	; 0x5c
 80022ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80022f0:	f7fd ff88 	bl	8000204 <__aeabi_uldivmod>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4613      	mov	r3, r2
 80022fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022fe:	e065      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0x420>
 8002300:	40023800 	.word	0x40023800
 8002304:	00f42400 	.word	0x00f42400
 8002308:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800230c:	4b3d      	ldr	r3, [pc, #244]	; (8002404 <HAL_RCC_GetSysClockFreq+0x458>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	099b      	lsrs	r3, r3, #6
 8002312:	2200      	movs	r2, #0
 8002314:	4618      	mov	r0, r3
 8002316:	4611      	mov	r1, r2
 8002318:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800231c:	653b      	str	r3, [r7, #80]	; 0x50
 800231e:	2300      	movs	r3, #0
 8002320:	657b      	str	r3, [r7, #84]	; 0x54
 8002322:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002326:	4642      	mov	r2, r8
 8002328:	464b      	mov	r3, r9
 800232a:	f04f 0000 	mov.w	r0, #0
 800232e:	f04f 0100 	mov.w	r1, #0
 8002332:	0159      	lsls	r1, r3, #5
 8002334:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002338:	0150      	lsls	r0, r2, #5
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4641      	mov	r1, r8
 8002340:	1a51      	subs	r1, r2, r1
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	4649      	mov	r1, r9
 8002346:	eb63 0301 	sbc.w	r3, r3, r1
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002358:	4659      	mov	r1, fp
 800235a:	018b      	lsls	r3, r1, #6
 800235c:	4651      	mov	r1, sl
 800235e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002362:	4651      	mov	r1, sl
 8002364:	018a      	lsls	r2, r1, #6
 8002366:	4651      	mov	r1, sl
 8002368:	1a54      	subs	r4, r2, r1
 800236a:	4659      	mov	r1, fp
 800236c:	eb63 0501 	sbc.w	r5, r3, r1
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	00eb      	lsls	r3, r5, #3
 800237a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800237e:	00e2      	lsls	r2, r4, #3
 8002380:	4614      	mov	r4, r2
 8002382:	461d      	mov	r5, r3
 8002384:	4643      	mov	r3, r8
 8002386:	18e3      	adds	r3, r4, r3
 8002388:	603b      	str	r3, [r7, #0]
 800238a:	464b      	mov	r3, r9
 800238c:	eb45 0303 	adc.w	r3, r5, r3
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800239e:	4629      	mov	r1, r5
 80023a0:	028b      	lsls	r3, r1, #10
 80023a2:	4621      	mov	r1, r4
 80023a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023a8:	4621      	mov	r1, r4
 80023aa:	028a      	lsls	r2, r1, #10
 80023ac:	4610      	mov	r0, r2
 80023ae:	4619      	mov	r1, r3
 80023b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023b4:	2200      	movs	r2, #0
 80023b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80023b8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80023ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80023be:	f7fd ff21 	bl	8000204 <__aeabi_uldivmod>
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	4613      	mov	r3, r2
 80023c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80023cc:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <HAL_RCC_GetSysClockFreq+0x458>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	0f1b      	lsrs	r3, r3, #28
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80023da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80023de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80023ea:	e003      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_RCC_GetSysClockFreq+0x45c>)
 80023ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80023f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	37b8      	adds	r7, #184	; 0xb8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800
 8002408:	00f42400 	.word	0x00f42400

0800240c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e28d      	b.n	800293a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 8083 	beq.w	8002532 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800242c:	4b94      	ldr	r3, [pc, #592]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	2b04      	cmp	r3, #4
 8002436:	d019      	beq.n	800246c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002438:	4b91      	ldr	r3, [pc, #580]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002440:	2b08      	cmp	r3, #8
 8002442:	d106      	bne.n	8002452 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002444:	4b8e      	ldr	r3, [pc, #568]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800244c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002450:	d00c      	beq.n	800246c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002452:	4b8b      	ldr	r3, [pc, #556]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800245a:	2b0c      	cmp	r3, #12
 800245c:	d112      	bne.n	8002484 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800245e:	4b88      	ldr	r3, [pc, #544]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800246a:	d10b      	bne.n	8002484 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246c:	4b84      	ldr	r3, [pc, #528]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d05b      	beq.n	8002530 <HAL_RCC_OscConfig+0x124>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d157      	bne.n	8002530 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e25a      	b.n	800293a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248c:	d106      	bne.n	800249c <HAL_RCC_OscConfig+0x90>
 800248e:	4b7c      	ldr	r3, [pc, #496]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a7b      	ldr	r2, [pc, #492]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 8002494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	e01d      	b.n	80024d8 <HAL_RCC_OscConfig+0xcc>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCC_OscConfig+0xb4>
 80024a6:	4b76      	ldr	r3, [pc, #472]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a75      	ldr	r2, [pc, #468]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 80024ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	4b73      	ldr	r3, [pc, #460]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a72      	ldr	r2, [pc, #456]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 80024b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	e00b      	b.n	80024d8 <HAL_RCC_OscConfig+0xcc>
 80024c0:	4b6f      	ldr	r3, [pc, #444]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a6e      	ldr	r2, [pc, #440]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 80024c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	4b6c      	ldr	r3, [pc, #432]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a6b      	ldr	r2, [pc, #428]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 80024d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d013      	beq.n	8002508 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7fe fb0a 	bl	8000af8 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e8:	f7fe fb06 	bl	8000af8 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	; 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e21f      	b.n	800293a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fa:	4b61      	ldr	r3, [pc, #388]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0xdc>
 8002506:	e014      	b.n	8002532 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7fe faf6 	bl	8000af8 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002510:	f7fe faf2 	bl	8000af8 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	; 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e20b      	b.n	800293a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002522:	4b57      	ldr	r3, [pc, #348]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x104>
 800252e:	e000      	b.n	8002532 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d06f      	beq.n	800261e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800253e:	4b50      	ldr	r3, [pc, #320]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b00      	cmp	r3, #0
 8002548:	d017      	beq.n	800257a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800254a:	4b4d      	ldr	r3, [pc, #308]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002552:	2b08      	cmp	r3, #8
 8002554:	d105      	bne.n	8002562 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002556:	4b4a      	ldr	r3, [pc, #296]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00b      	beq.n	800257a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002562:	4b47      	ldr	r3, [pc, #284]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800256a:	2b0c      	cmp	r3, #12
 800256c:	d11c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800256e:	4b44      	ldr	r3, [pc, #272]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d116      	bne.n	80025a8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257a:	4b41      	ldr	r3, [pc, #260]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d005      	beq.n	8002592 <HAL_RCC_OscConfig+0x186>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d001      	beq.n	8002592 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e1d3      	b.n	800293a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002592:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4937      	ldr	r1, [pc, #220]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a6:	e03a      	b.n	800261e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d020      	beq.n	80025f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b0:	4b34      	ldr	r3, [pc, #208]	; (8002684 <HAL_RCC_OscConfig+0x278>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b6:	f7fe fa9f 	bl	8000af8 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025be:	f7fe fa9b 	bl	8000af8 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e1b4      	b.n	800293a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d0:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025dc:	4b28      	ldr	r3, [pc, #160]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4925      	ldr	r1, [pc, #148]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	600b      	str	r3, [r1, #0]
 80025f0:	e015      	b.n	800261e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025f2:	4b24      	ldr	r3, [pc, #144]	; (8002684 <HAL_RCC_OscConfig+0x278>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7fe fa7e 	bl	8000af8 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002600:	f7fe fa7a 	bl	8000af8 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e193      	b.n	800293a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002612:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d036      	beq.n	8002698 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d016      	beq.n	8002660 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <HAL_RCC_OscConfig+0x27c>)
 8002634:	2201      	movs	r2, #1
 8002636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002638:	f7fe fa5e 	bl	8000af8 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002640:	f7fe fa5a 	bl	8000af8 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e173      	b.n	800293a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002652:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 8002654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x234>
 800265e:	e01b      	b.n	8002698 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002660:	4b09      	ldr	r3, [pc, #36]	; (8002688 <HAL_RCC_OscConfig+0x27c>)
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002666:	f7fe fa47 	bl	8000af8 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266c:	e00e      	b.n	800268c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800266e:	f7fe fa43 	bl	8000af8 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d907      	bls.n	800268c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e15c      	b.n	800293a <HAL_RCC_OscConfig+0x52e>
 8002680:	40023800 	.word	0x40023800
 8002684:	42470000 	.word	0x42470000
 8002688:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800268c:	4b8a      	ldr	r3, [pc, #552]	; (80028b8 <HAL_RCC_OscConfig+0x4ac>)
 800268e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1ea      	bne.n	800266e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 8097 	beq.w	80027d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026aa:	4b83      	ldr	r3, [pc, #524]	; (80028b8 <HAL_RCC_OscConfig+0x4ac>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10f      	bne.n	80026d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	4b7f      	ldr	r3, [pc, #508]	; (80028b8 <HAL_RCC_OscConfig+0x4ac>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	4a7e      	ldr	r2, [pc, #504]	; (80028b8 <HAL_RCC_OscConfig+0x4ac>)
 80026c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c4:	6413      	str	r3, [r2, #64]	; 0x40
 80026c6:	4b7c      	ldr	r3, [pc, #496]	; (80028b8 <HAL_RCC_OscConfig+0x4ac>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d2:	2301      	movs	r3, #1
 80026d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d6:	4b79      	ldr	r3, [pc, #484]	; (80028bc <HAL_RCC_OscConfig+0x4b0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d118      	bne.n	8002714 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026e2:	4b76      	ldr	r3, [pc, #472]	; (80028bc <HAL_RCC_OscConfig+0x4b0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a75      	ldr	r2, [pc, #468]	; (80028bc <HAL_RCC_OscConfig+0x4b0>)
 80026e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ee:	f7fe fa03 	bl	8000af8 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f6:	f7fe f9ff 	bl	8000af8 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e118      	b.n	800293a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002708:	4b6c      	ldr	r3, [pc, #432]	; (80028bc <HAL_RCC_OscConfig+0x4b0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d106      	bne.n	800272a <HAL_RCC_OscConfig+0x31e>
 800271c:	4b66      	ldr	r3, [pc, #408]	; (80028b8 <HAL_RCC_OscConfig+0x4ac>)
 800271e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002720:	4a65      	ldr	r2, [pc, #404]	; (80028b8 <HAL_RCC_OscConfig+0x4ac>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	6713      	str	r3, [r2, #112]	; 0x70
 8002728:	e01c      	b.n	8002764 <HAL_RCC_OscConfig+0x358>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b05      	cmp	r3, #5
 8002730:	d10c      	bne.n	800274c <HAL_RCC_OscConfig+0x340>
 8002732:	4b61      	ldr	r3, [pc, #388]	; (80028b8 <HAL_RCC_OscConfig+0x4ac>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	4a60      	ldr	r2, [pc, #384]	; (80028b8 <HAL_RCC_OscConfig+0x4ac>)
 8002738:	f043 0304 	orr.w	r3, r3, #4
 800273c:	6713      	str	r3, [r2, #112]	; 0x70
 800273e:	4b5e      	ldr	r3, [pc, #376]	; (80028b8 <HAL_RCC_OscConfig+0x4ac>)
 8002740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002742:	4a5d      	ldr	r2, [pc, #372]	; (80028b8 <HAL_RCC_OscConfig+0x4ac>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6713      	str	r3, [r2, #112]	; 0x70
 800274a:	e00b      	b.n	8002764 <HAL_RCC_OscConfig+0x358>
 800274c:	4b5a      	ldr	r3, [pc, #360]	; (80028b8 <HAL_RCC_OscConfig+0x4ac>)
 800274e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002750:	4a59      	ldr	r2, [pc, #356]	; (80028b8 <HAL_RCC_OscConfig+0x4ac>)
 8002752:	f023 0301 	bic.w	r3, r3, #1
 8002756:	6713      	str	r3, [r2, #112]	; 0x70
 8002758:	4b57      	ldr	r3, [pc, #348]	; (80028b8 <HAL_RCC_OscConfig+0x4ac>)
 800275a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275c:	4a56      	ldr	r2, [pc, #344]	; (80028b8 <HAL_RCC_OscConfig+0x4ac>)
 800275e:	f023 0304 	bic.w	r3, r3, #4
 8002762:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d015      	beq.n	8002798 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276c:	f7fe f9c4 	bl	8000af8 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002772:	e00a      	b.n	800278a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002774:	f7fe f9c0 	bl	8000af8 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e0d7      	b.n	800293a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278a:	4b4b      	ldr	r3, [pc, #300]	; (80028b8 <HAL_RCC_OscConfig+0x4ac>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0ee      	beq.n	8002774 <HAL_RCC_OscConfig+0x368>
 8002796:	e014      	b.n	80027c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002798:	f7fe f9ae 	bl	8000af8 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a0:	f7fe f9aa 	bl	8000af8 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e0c1      	b.n	800293a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b6:	4b40      	ldr	r3, [pc, #256]	; (80028b8 <HAL_RCC_OscConfig+0x4ac>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1ee      	bne.n	80027a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027c2:	7dfb      	ldrb	r3, [r7, #23]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d105      	bne.n	80027d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c8:	4b3b      	ldr	r3, [pc, #236]	; (80028b8 <HAL_RCC_OscConfig+0x4ac>)
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	4a3a      	ldr	r2, [pc, #232]	; (80028b8 <HAL_RCC_OscConfig+0x4ac>)
 80027ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 80ad 	beq.w	8002938 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027de:	4b36      	ldr	r3, [pc, #216]	; (80028b8 <HAL_RCC_OscConfig+0x4ac>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d060      	beq.n	80028ac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d145      	bne.n	800287e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f2:	4b33      	ldr	r3, [pc, #204]	; (80028c0 <HAL_RCC_OscConfig+0x4b4>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7fe f97e 	bl	8000af8 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002800:	f7fe f97a 	bl	8000af8 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e093      	b.n	800293a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002812:	4b29      	ldr	r3, [pc, #164]	; (80028b8 <HAL_RCC_OscConfig+0x4ac>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69da      	ldr	r2, [r3, #28]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	019b      	lsls	r3, r3, #6
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	085b      	lsrs	r3, r3, #1
 8002836:	3b01      	subs	r3, #1
 8002838:	041b      	lsls	r3, r3, #16
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	061b      	lsls	r3, r3, #24
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	071b      	lsls	r3, r3, #28
 800284a:	491b      	ldr	r1, [pc, #108]	; (80028b8 <HAL_RCC_OscConfig+0x4ac>)
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002850:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_RCC_OscConfig+0x4b4>)
 8002852:	2201      	movs	r2, #1
 8002854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002856:	f7fe f94f 	bl	8000af8 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe f94b 	bl	8000af8 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e064      	b.n	800293a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <HAL_RCC_OscConfig+0x4ac>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x452>
 800287c:	e05c      	b.n	8002938 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287e:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <HAL_RCC_OscConfig+0x4b4>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7fe f938 	bl	8000af8 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800288c:	f7fe f934 	bl	8000af8 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e04d      	b.n	800293a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_RCC_OscConfig+0x4ac>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x480>
 80028aa:	e045      	b.n	8002938 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d107      	bne.n	80028c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e040      	b.n	800293a <HAL_RCC_OscConfig+0x52e>
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40007000 	.word	0x40007000
 80028c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028c4:	4b1f      	ldr	r3, [pc, #124]	; (8002944 <HAL_RCC_OscConfig+0x538>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d030      	beq.n	8002934 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028dc:	429a      	cmp	r2, r3
 80028de:	d129      	bne.n	8002934 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d122      	bne.n	8002934 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028f4:	4013      	ands	r3, r2
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d119      	bne.n	8002934 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	085b      	lsrs	r3, r3, #1
 800290c:	3b01      	subs	r3, #1
 800290e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002910:	429a      	cmp	r2, r3
 8002912:	d10f      	bne.n	8002934 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002920:	429a      	cmp	r2, r3
 8002922:	d107      	bne.n	8002934 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800

08002948 <__libc_init_array>:
 8002948:	b570      	push	{r4, r5, r6, lr}
 800294a:	4d0d      	ldr	r5, [pc, #52]	; (8002980 <__libc_init_array+0x38>)
 800294c:	4c0d      	ldr	r4, [pc, #52]	; (8002984 <__libc_init_array+0x3c>)
 800294e:	1b64      	subs	r4, r4, r5
 8002950:	10a4      	asrs	r4, r4, #2
 8002952:	2600      	movs	r6, #0
 8002954:	42a6      	cmp	r6, r4
 8002956:	d109      	bne.n	800296c <__libc_init_array+0x24>
 8002958:	4d0b      	ldr	r5, [pc, #44]	; (8002988 <__libc_init_array+0x40>)
 800295a:	4c0c      	ldr	r4, [pc, #48]	; (800298c <__libc_init_array+0x44>)
 800295c:	f000 f820 	bl	80029a0 <_init>
 8002960:	1b64      	subs	r4, r4, r5
 8002962:	10a4      	asrs	r4, r4, #2
 8002964:	2600      	movs	r6, #0
 8002966:	42a6      	cmp	r6, r4
 8002968:	d105      	bne.n	8002976 <__libc_init_array+0x2e>
 800296a:	bd70      	pop	{r4, r5, r6, pc}
 800296c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002970:	4798      	blx	r3
 8002972:	3601      	adds	r6, #1
 8002974:	e7ee      	b.n	8002954 <__libc_init_array+0xc>
 8002976:	f855 3b04 	ldr.w	r3, [r5], #4
 800297a:	4798      	blx	r3
 800297c:	3601      	adds	r6, #1
 800297e:	e7f2      	b.n	8002966 <__libc_init_array+0x1e>
 8002980:	080029d0 	.word	0x080029d0
 8002984:	080029d0 	.word	0x080029d0
 8002988:	080029d0 	.word	0x080029d0
 800298c:	080029d4 	.word	0x080029d4

08002990 <memset>:
 8002990:	4402      	add	r2, r0
 8002992:	4603      	mov	r3, r0
 8002994:	4293      	cmp	r3, r2
 8002996:	d100      	bne.n	800299a <memset+0xa>
 8002998:	4770      	bx	lr
 800299a:	f803 1b01 	strb.w	r1, [r3], #1
 800299e:	e7f9      	b.n	8002994 <memset+0x4>

080029a0 <_init>:
 80029a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029a2:	bf00      	nop
 80029a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029a6:	bc08      	pop	{r3}
 80029a8:	469e      	mov	lr, r3
 80029aa:	4770      	bx	lr

080029ac <_fini>:
 80029ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ae:	bf00      	nop
 80029b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029b2:	bc08      	pop	{r3}
 80029b4:	469e      	mov	lr, r3
 80029b6:	4770      	bx	lr
